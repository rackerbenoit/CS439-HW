Homework #: 8
Student Name: Paul Benoit
EID: pjb742
CS login: paulbeno
Email address: paul.benoit36@gmail.com
Unique Number: 53015

--
In some operating systems, I/O from/to disk is done directly to/from a buffer in the user program's memory. The user program does a system call specifying the address and length of the buffer (the length must be a multiple of the disk record size). 
The disk controller needs a physical memory address, not a virtual address. Your co-worker proposes that when the user does a write system call, the operating system should check that the user's virtual address is valid, translate it into a physical address, and pass that address and the length (also checked for validity) to the disk hardware. 
This won't quite work. In no more than two sentences, what did your co-worker forget?
----------1.


The user does not know the virtual address, only the logical address.


--
The MegaGiga hard disk rotates at 5400 rpm with an arm seek time given by = 4 + 0.05t msec, where t is the number of tracks the arm seeks. Assume a block size of 512 bytes, and 1024 tracks with 512 blocks/track. The disk controller and DMA read or write data from/to disk at a rate of 4MB/sec. What is the storage capacity of the disk?
----------2.


512 * 512 * 1024 = 268435456 bytes


--
Disk requests come into the disk driver for tracks 10, 22, 20, 2, 40, 6, and 38, in that order. A seek takes 6 msec per track moved. How much seek time is needed for the following scheduling algorithms?
a) FIFO 
b) SSTF 
c) LOOK (SCAN, but doesn't move to the end) 
In all cases, the arm is initially at track 20, and you may assume that the head is traveling towards higher numbers.
----------3.


a) 876 msec = .876 sec
b) 360 msec = .360 sec
c) 348 msec = .348 sec


--
Assume a spinning disk. Where on that disk would you place the inode array? Justify your answer.
----------4.


On a spinning disk, keeping related blocks near each other reduces the amount of movement that the head actuator and disk must perform to access a data block, thus speeding up disk IO. 


--
Some file allocation schemes limit the size of the file whether or not there is enough space for a larger file. Which ones and why?
a. Linked
b. Direct
c. Contiguous
d. Multi-Level index
e. Extents
----------5.


Linked - Files can grow just fine
Direct - Can grow easily
Contiguous - Initially can have any size but cannot grow afterwards. Once a set amount of space is allocated, that is it.
Multi-level Index - Supports growing....does limit the size to some extent if the system runs out of indexes at the 3rd level (512gb)
Extents - Grows well



--
Pooh Software Ltd. is selling a file system that uses a UNIX-like file system with multi-level indexing. For more reliability, the inode array is actually replicated on the disk in two different places. The intent is that if one or a group of sectors that are storing either replica of the array become bad, the system can always recover from the replica. Discuss the effect of having this replicated data structure on performance.
----------6.


Updates to inodes will have to be done to both copies. This will decrease the performance of operations that attempt to modify the inodes, such as allocating a new file, deleting a file, extending the size of a file, or opening a file for updates (among perhaps many others). However, reading information from an inode can be made faster with clever disk scheduling. To read a particular inode, we schedule a read from either track that is closest to the current head position.





