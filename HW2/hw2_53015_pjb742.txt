Homework #: 2
Student Name: Paul Benoit
EID: pjb742
CS login: paulbeno
Email address: paul.benoit36@gmail.com
Unique Number: 53015

----------1.
Instruction that can only be run in kernel mode, NOT user mode
- Halt the processor
- Change the mode bit
- Initiate an I/O operation
- Disable/Enable Interuupts
- Manipulating OS memory

----------2.
If each process is running independently and not in need of another process in the background, allocate all the processor.
Generally this would not be the best method though. If multiple tasks are ready to exectute at the same time and the user needs to multitask, allocating the CPU to run them at the same time would be best.
Heavy processes should be started first with smaller processes being run in the background behind it and the heavy process taking the mojority of the CPU.
This will allow for more important processes to run and finish at a similar(hopefully) time as the smaller processes.

Physical memory should allocate the most memory to large/important processes while the smaller processes should be swapped in and out if there is not enough memory available for all the processes.

----------3.

Each process executed in user mode needs to be checked  for memory access. If it is kernel, process does not need to be checked.
Page tables and other data structures help processes stay within their rights of access

---------4.

OS uses this when it wants to give control to a user process and this happens at the end of a context switch. This can also happen at the end of an interrupt service routine.

----------5.

31

----------6.

Program: Human readable code
Executable: Compiled program
Process: Running executable

