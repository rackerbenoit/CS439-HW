Homework #: 4
Student Name: Paul Benoit
EID: pjb742
CS login: paulbeno
Email address: paul.benoit36@gmail.com
Unique Number: 53015

----------1.

A program with less importance/priority grabs the resources of a program with more priority

This could happen with two or more tasks. A is high priority and B is low priority and both can lock exclusive use of a particular resource.
If B requests the resource then A requests the resource while B is using the resource, A is blocked from using the resource until B is done.
This is a problem since the higher priority problem was blocked by the lower priority.

----------2.

Yes, there would be a need for critical sections within that kernel.
If a user program enters the kernel through a trap while running operating system code, the machine receives an interupt. The interrupt handler may modify global data structure that the kernel code was trying to modify. Even though only one thread is running, the need to partition critical sections out is important.

----------3.

Mutual Exclusion - At least one resource must be held in a non-shareable mode. Only one process can use the resource at any given instant of time

Resource Holding - A process is currently holding at least one resource and requesting additional resources which are being held by other processes

No Preemption - A resource can be released only voluntarily by the process holding it, after that process has completed its task

Circular Wait - A process must be wiating for a resource which is being held by another process, which in turn is waiting for the first process to release the resource.

----------4.

Both semaphores will acquired and released in the same order so there will be no deadlock.

----------5.

Condition variables in monitors do not have any history; semaphores do have history
Monitors consist of a lock and one or more condition variables, semaphores do not have condition variables.
Another difference when using semaphores is that every routine accessing a shared resource has to explicitly acquire a a lock before using the resource. This can be easily forgotten when coding the routines dealing with multithreading . Monitors, unlike semaphores, automatically acquire the necessary locks.


----------6.

1.
semaphore bike = 1;
semaphore rest = 1;

void borrow_bike()
{
	bike -> down();
	//This means resting is locked and that
	//the rider may not rest at the time
	//They rest until they get on the bike
	rest -> down();

	<ride bike>

	bike -> up();
	rest -> up();
}

2.
Condvar bike;
int bike = 1;
Condvar rest;
int rest = 1;

void borrow_bike()
{
	lock -> acquire();
	while(bike == 0 && rest == 0)
		<ride bike>
	bike, rest = 1;
	lock -> release();
}
