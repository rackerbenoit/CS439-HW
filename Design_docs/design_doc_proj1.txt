			+--------------------+
			|        CS 439      |
			| PROJECT 1: THREADS |
			|   DESIGN DOCUMENT  |
			+--------------------+

****EACH student submits a (unique) design document.****

---- Paul Benoit ----

>> Fill your name, UT EID, CS login, email address, and unique number:

Name: Paul Benoit
EID: pjb742
CS login: paulbeno
Email: paul.benoit36@gmail.com
Unique Number: 53015


Slip days used on this project: 0

---- GROUP ----

>> Fill the names, UT EIDs, CS logins, email addresses, and unique numbers
>> of your group members.  Also fill in each person's ranking on the 
>> partner evaluation scale, as determined by you.

Name1: John Wittenmyer
EID1: jdw2495
CS login: clendn
Email: john.wittenmyer@utexas.edu
Unique Number: 53032
Ranking (scale below): Very Good

Name2: Jesse Isleib
EID2: jsi234
CS login: isleibjs
Email: jesse.isleib@gmail.com
Unique Number: 53033
Ranking (scale below): Very Good

---- PARTNER EVALUATION SCALE ----

>> Excellent: Consistently went above and beyond - tutored others, carried
>> more than his/her fair share of the load.

>> Very Good: Consistently did what he/she was supposed to do, very well
>> prepared and cooperative.

>> Satisfactory: Usually did what he/she was supposed to do, minimally
>> prepared and cooperative.

>> Marginal: Sometimes failed to show up and/or rarely prepared.

>> Deficient: Often failed to show up and/or rarely prepared.

>> Unsatisfactory: Consistently failed to show up and/or unprepared.

>> Superficial: Practically no participation.

>> No Show: No participation at all.


---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

Other than text, lecture notes, group partners, and course staff, I did not use other resources.

			     ALARM CLOCK
			     ===========

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.


Added to struct thread:
/* Keep track of the number of ticks a thread has been asleep.
 * Idle, Kernel, and User ticks are already tracked. We used this
 * in conjunction with those */
int64_t sleep_ticks; 

/* A new list_element that allowed us to track the sleeping threads
 * so that we knew what to wake up */
struct list_elem sleep_elem;

/* In timer.c
 * This function will check if the thread should wake up*/
void thread_checkwake (struct thread *t)

/* In timer.h, new function
 * Used in insert_ordered for list;
 * checks which thread has more time to wait */
bool thread_chk_timer (const struct list_elem *insert,
                       const struct list_elem *cmp_to, void *x);


---- ALGORITHMS ----

>> A2: Briefly describe what happens in a call to timer_sleep(),
>> including the effects of the timer interrupt handler.


1) A call to timer sleep creates a new thread and initializes it to the currently running thread. 
2) We then set sleep_ticks to ticks passed in and ticked since OS booted. This gives us the ability to know how long a thread has been sleeping.
3) Initially, we used the list_push_back function to push the thread onto the queue but after completing priority scheduling, we have list_insert_ordered to push the thread(sleep_slem) into the sleep_list in the correct priority order.
4) Block the thread. We call sema_down on the current thread so that we seclude it in its own thread. sema_up is called right before the thread is removed from the sleep_list in a different function
There are also some calls to checkwake() to make sure we should be waking threads and taking them off the 
thread_chk_timer() checks to make sure that the sleeping threads are inserted in the correct order.

In the timer interrupt handler:
1) Get the beginning front list thread.
2) If the thread's ticks value <= the global ticks, the thread is removed
from the sleep list and unblocked.
3) Repeat steps 1-2 until the sleep list is empty or the thread's tick
value > the global ticks.
4) Test to see if the current thread is still highest priority since other
threads may have been unblocked.

This replaces the previous implementation of thread_yield()


>> A3: What steps are taken to minimize the amount of time spent in
>> the timer interrupt handler?


The INTR_OFF includes as little code as possible before calling INTR_ON again. This keeps the interrupts from being stopped for long periods of time.

Also, Note that by keeping the sleep list in sorted order, this minimizes the
time in the interrupt handler. Thus, the handler does not have to iterate
through the entire sleep list at every interrupt.


---- SYNCHRONIZATION ----

>> A4: How are race conditions avoided when multiple threads call
>> timer_sleep() simultaneously?


We acquire a lock with sema_down after inserting a particular thread in the sleep_list


>> A5: How are race conditions avoided when a timer interrupt occurs
>> during a call to timer_sleep()?


Interrupts are turned off for steps 2-4 in timer_sleep. Since ready_lists and sleep_lists are read / modified in the interrupt handler, steps 3-4 need to be turned off. Step 2 is turned off as well since if the current thread tick value is calculated, but then the thread is pre-empted or interrupted, the global ticks could eventually be > the tick value calculated and the thread would never had slept!

Step 1 does not allow race conditions since it is a local variable and if the ticks value is invalid, then the thread should not sleep anyways.


---- RATIONALE ----

>> A6: Why did you choose this design?  In what ways is it superior to
>> another design you considered?


For this particular section, this was the first idea we considered. The goal of suspending execution until the thread has waited the correct number of ticks required us to insert the waiting threads onto a sleep_list. We just called each thread that was waiting a sleep_elem. Fairly easy to keep track of that element. Ordering of the list was also done for sleep_list using thread_chk_timer(). We then created another function specifically to check whether or not the sleep_elem should be awakened or not. If so, we obviously remove it from the list after releasing the lock by calling sema_up.

Additionally, we did discuss the possibility of not sorting the list initially. We realized we would spend more time in the interrupt handler if we did not sort.

There was certainly some debugging that needed to be done, but overall we were able to stick with our one plan throughout the Alarm Clock process.


			 PRIORITY SCHEDULING
			 ===================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.


bool thread_chk_less (const struct list_elem *insert, 
                      const struct list_elem *cmp_to, void *x);
  - New function in thread.h
  - Checks to where new thread should be inserted based on priority

In thread.h, the following variables are added to the thread struct:

int initial_priority;  
  -Need to keep track of initial priority
struct list_elem lock_elem;
  -List element for ordering lock accesses 
struct list lock_list; 
  -Keep track of all locks held by thread. 
struct thread *waiting_on;          
  -The lock the thread is waiting on (NULL if not waiting on any lock)
struct list_elem donor_elem
  -Element that needs priority donated
struct list donor_list
  -List of donor_elem that need to have priority donated

In synch.h:
struct list_elem lock_elem
  -List element for ordering lock access

struct semaphore sema_priority;
  -Used to initialize a new semaphore to describe priorities


>> B2: Explain the data structure used to track priority donation.
>> Use ASCII art to diagram a nested donation.  (Alternately, submit a
>> .png file.)

A, B, C are locks
H1, H2, M, L are threads

    A
H1 --->    C
H2 ---> M ---> L
    B

M's donation list: H1, H2
L's donation list: M

M's wait on lock: C
L's wait on lock: NULL

M's current donated priority is max(H1, H2, M).
L's current donated priority is max(L, M).


---- ALGORITHMS ----

>> B3: How do you ensure that the highest priority thread waiting for
>> a lock, semaphore, or condition variable wakes up first?


Describing a structure that orders each new thread by priority as it goes into the sleep_list. Also, by ordering the sleep_elems by priority before beginning to insert new ordered priorities into the sleep_list
The list of waiters denotes the thread waiting for the semaphore to be upped. Waiters are inserted such that the front thread has the highest priority. Waiters list is also sorted after the semaphore is released.


>> B4: Describe the sequence of events when a call to lock_acquire()
>> causes a priority donation.  How is nested donation handled?


The current thread updates its wait on lock variable to the current
lock then the current thread adds itself to the lock holder's donations list.
After that, the Priority is donated iteratively via the following process

   - thread = current thread
   - lock = lock current thread is waiting on
   while (lock exists)
   {
     - if there is no holder for lock, return
     - if the lock holder has a bigger (or equal) priority than thread's
       priority, return
     - Set the lock holder's priority = thread's priority
     - Update thread = lock holder
     - Update lock = lock thread is waiting on
   }
   Note that this iteration has a depth of 8 in order.

A nested donation is handled by dealing with threads that are requesting locks of other threads
This is handled by iteratively handling the depth of the threads and their locks

Essentially, many threads could all have high priority until all are released


>> B5: Describe the sequence of events when lock_release() is called
>> on a lock that a higher-priority thread is waiting for.


The lock holder is updated to NULL. Removes the thread's waiting on the just-released lock off the current
thread's donation list. Simply, the priority donation is gone once the lock is released.
Update the current thread's priority. This means finding the highest
priority thread on the donation list.
The highest waiting priority thread acquires the lock and is put on the
ready queue. Check if the current thread still has max priority. If not, yield the
processor.


---- SYNCHRONIZATION ----

>> B6: Describe a potential race in thread_set_priority() and explain
>> how your implementation avoids it.  Can you use a lock to avoid
>> this race?


Turned off interrupts to avoid the potential race

A potential race condition would be while the thread priority variable is
being updated to the new priority, the interrupt handler is writing to the
priority variable. Thus, these conflicting writes could change the
priority variable, therefore being a race condition.


---- RATIONALE ----

>> B7: Why did you choose this design?  In what ways is it superior to
>> another design you considered?


It made easy use out of the linked list implementation give
to us. I was conflicted with using another design where each thread had a
list of acquired locks, but determined refreshing priority (after a lock
is released), finding the next highest priority would be inefficient as
would sorting a list of locks (with waiters for each lock).


		  ADVANCED SCHEDULER (Extra Credit)
		  =================================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> C2: Suppose threads A, B, and C have nice values 0, 1, and 2.  Each
>> has a recent_cpu value of 0.  Fill in the table below showing the
>> scheduling decision and the priority and recent_cpu values for each
>> thread after each given number of timer ticks:

timer  recent_cpu    priority   thread
ticks   A   B   C   A   B   C   to run
-----  --  --  --  --  --  --   ------
 0
 4
 8
12
16
20
24
28
32
36

>> C3: Did any ambiguities in the scheduler specification make values
>> in the table uncertain?  If so, what rule did you use to resolve
>> them?  Does this match the behavior of your scheduler?

>> C4: How is the way you divided the cost of scheduling between code
>> inside and outside interrupt context likely to affect performance?

---- RATIONALE ----

>> C5: Briefly critique your design, pointing out advantages and
>> disadvantages in your design choices.  If you were to have extra
>> time to work on this part of the project, how might you choose to
>> refine or improve your design?

>> C6: The assignment explains arithmetic for fixed-point math in
>> detail, but it leaves it open to you to implement it.  Why did you
>> decide to implement it the way you did?  If you created an
>> abstraction layer for fixed-point math, that is, an abstract data
>> type and/or a set of functions or macros to manipulate fixed-point
>> numbers, why did you do so?  If not, why not?

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future semesters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the semester.

>> In your opinion, was this assignment, or any one of the two problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future semesters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future semesters or the remaining projects?

>> Any other comments?
