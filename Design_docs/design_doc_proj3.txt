                    +---------------------------+
                    |           CS 439          |
	 			    | PROJECT 3: VIRTUAL MEMORY	|
				    |	   DESIGN DOCUMENT	|
		  		    +---------------------------+


****EACH student submits a (unique) design document.****

---- Name ----

>> Fill your name, UT EID, CS login, email address, and unique number:

Name: Paul Benoit
EID: pjb742
CS login: paulbeno
Email: paul.benoit36@gmail.com
Unique Number: 53015


Slip days used on this project: 2

---- GROUP ----

>> Fill the names, UT EIDs, CS logins, email addresses, and unique numbers
>> of your group members.  Also fill in each person's ranking on the 
>> partner evaluation scale, as determined by you.

Name2: Jordan Torres
EID2: jxt59
CS login: jxtbronc
Email: jxtbronco@yahoo.com
Unique Number: 53033
Ranking (scale below): Excellent

Name3: Zoe Lamb
EID3: zl2866
CS login: zoe
Email: zlamb@utexas.edu
Unique Number: 53005
Ranking (scale below): Excellent

Name4: Hans Urquia
EID4: hau72
CS login: haurquia
Email: hansurquia@gmail.com
Unique Number: 53025
Ranking (scale below): Satisfactory


---- PARTNER EVALUATION SCALE ----

>> Excellent: Consistently went above and beyond - tutored others, carried
>> more than his/her fair share of the load.

>> Very Good: Consistently did what he/she was supposed to do, very well
>> prepared and cooperative.

>> Satisfactory: Usually did what he/she was supposed to do, minimally
>> prepared and cooperative.

>> Marginal: Sometimes failed to show up and/or rarely prepared.

>> Deficient: Often failed to show up and/or rarely prepared.

>> Unsatisfactory: Consistently failed to show up and/or unprepared.

>> Superficial: Practically no participation.

>> No Show: No participation at all.


---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

http://en.wikipedia.org/wiki/Page_replacement_algorithm#First-in.2C_first-out
http://en.wikipedia.org/wiki/Deadlock#Necessary_conditions


			PAGE TABLE MANAGEMENT
			=====================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.


NEW
- struct page allows us to properly track the changes and additions to our supplemental page table.
struct page 
{
	bool stack_page; -> Checks whether or not an argument should be added to the stack
	struct swap_slot *swap; -> Check if the page could be swapped
	uint32_t vaddr; -> Stores the virtual address
	uint32_t my_frame;  -> Points the frame table
	struct hash_elem h_elem; -> Helps store and iterate through the hash table
	struct file *my_file; -> File to store/swap/put in the frame
	int file_bytes_to_read; -> Amount of bytes to read from a file
	bool is_text; -> Check if an argument consists of text so that we know if we should add it to the stack
	bool writeable; -> Store whether or not the writable bit is set inside process.c
	off_t my_ofs; -> Store the offset so we hit the correct boundaries
};

ADDED
In thread struct
	- Hash table for the supplemental page table
    struct hash *supp_table;          


---- ALGORITHMS ----

>> A2: In a few paragraphs, describe your code for locating the frame,
>> if any, that contains the data of a given page.


When we need to locate a page, the function fetch_page is called. This takes a virtual address and returns the page struct that corresponds to that virtual page. If the page has not been demanded yet, it creates (using create_page) the struct and gives it a frame.

If the page data is in swap, we can also allocate a frame but we can call transition_page_to_swap_space pointing the index stored in the page table entry. We can then mark the entry as a loaded file again.


>> A3: How does your code coordinate accessed and dirty bits between
>> kernel and user virtual addresses that alias a single frame, or
>> alternatively how do you avoid the issue?


We store the user physical and virtual addresses in our frame and page struct. Whenever we change the page though, we only use the virtual address of the frame. Essentially, we only set the dirty and accessed bits using the virtual address which is helpful when processes need access, whether they be kernel or user address.


---- SYNCHRONIZATION ----

>> A4: When two user processes both need a new frame at the same time,
>> how are races avoided?


We created and initialized a semaphore in the struct table and struct frame. When requests are made for frames, the semaphores are downed during the creation and allocation and upped once again once the allocation is done. This keeps processes from becoming deadlocked while requesting a frame


---- RATIONALE ----

>> A5: Why did you choose the data structure(s) that you did for
>> representing virtual memory-to-physical memory mappings?


We chose a hash table for representing our virtual memory-to-physical memory mappings. Our main priority in mapping was to increase speed and efficiency so this made much more sense than arrays or lists. 
We used hash maps for frames and swapping also but not necessarily because we needed speed or dynamically changing structures. We just used it since it was already provided to us


		       PAGING TO AND FROM DISK
		       =======================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.


NEW
- struct frame allows us to properly track what is in each frame which represents physical frames in physcial memory
struct frame
{
	struct page* squatter; -> Stores whether or not the frame is being stored in a page table
	int occupied; -> Is a frame occupied?
	uint32_t physaddr; -> Stores the physical address of particular bytes/files
	struct hash_elem h_elem; -> Allows us to iterate through and store in the hash table
	struct semaphore frame_rights; -> Semaphore for locking while dealing with the frame

NEW
- struct swap_slot allows us to properly track what is being swapped and stored in and out of the swap disk
struct swap_slot
{
	struct page* squatter; -> Check what is in the page table
	int occupied; -> Is a swap partition occupied?
	block_sector_t offset; -> Make sure we do not cross boundaries
	struct hash_elem h_elem; -> Allows us to iterate through the swap table using a hash table
	struct semaphore slot_rights; -> Semaphore for locking while dealing with the swap_slot
};

ADDED
In thread struct        

    - Hash table for the frame table which is physical memory
    static struct hash frame_table;
    - Hash table for the swap table which is on a disk partition
    static struct hash slot_table;


---- ALGORITHMS ----

>> B2: When a frame is required but none is free, some frame must be
>> evicted.  Describe your code for choosing a frame to evict.


When there are no frames left, the program page faults. Inside of our page fault handler, we assign the frame address to the function evict_frame in swap.c. Evict frame assigns frames to a particular block and sector. It then copies those over to the swap disk and clears the frames. When that is finished, the frames that initially requested access are now assigned to a particular frame.

We use the FIFO page replacement algorithm. The idea is obvious from the name â€“ the operating system keeps track of all the pages in memory in a queue, with the most recent arrival at the back, and the oldest arrival in front. When a page needs to be replaced, the page at the front of the queue (the oldest page) is selected. This is not always the best to use in practical application


>> B3: When a process P obtains a frame that was previously used by a
>> process Q, how do you adjust the page table (and any other data
>> structures) to reflect the frame Q no longer has?


When a frame istaken from Q for P to use, our program calls pagedir_clear_page, which essentially clears Q from the frame. The program stores the pointer to the thread who uses the frame in the frame struct. The program can then look at the page directory, pagedir

The program also updates the entry in the supplemental page table. If the program swaps out the data from Q's frame, the program can set the member of the supp page table entry to keep track of this until the program wants to swap the data back


>> B4: Explain your heuristic for deciding whether a page fault for an
>> invalid virtual address should cause the stack to be extended into
>> the page that faulted.


The handler must check if the page is in the page table. Then, just as the notes state, we check if the fault address is less than or equal to 32 bytes below the stack pointer, since the PUSHA instruction pushed 32 bytes at once, so it can fault 32 bytes below the stack pointer. We also want to check that pushing another argument onto the stack will not make it larger than the max size allowed, which is 8MB in our case and in general.


---- SYNCHRONIZATION ----

>> B5: Explain the basics of your VM synchronization design.  In
>> particular, explain how it prevents deadlock.  (Refer to the
>> textbook for an explanation of the necessary conditions for
>> deadlock.)


We use semaphores for the frame table and the swap table. The supplemental page table is used on an individual thread basis. A thread will also only perform delete and insert operations on individual supplemental page tables, so we do not use a lock.

The frame and swap table prevent deadlocks (which includes solving for one of the following: Mutual exclusion, Resource holding, Circular wait, No preemption) by locking with semaphores so that processes cannot read, write, and delete on multiple slots or frames at the same time. Individual threads at the same time can be involved in the eviction process and that requires synchronization to prevent a deadlock


>> B6: A page fault in process P can cause another process Q's frame
>> to be evicted.  How do you ensure that Q cannot access or modify
>> the page during the eviction process?  How do you avoid a race
>> between P evicting Q's frame and Q faulting the page back in?


Every time a thread modifies its page directory or another thread's page, a lock must be acquired. If P selects Q's frame for eviction, P will obtain a lock on Q's page, and Q will not be able to progress until P has finished.

Our program clears Q before P can be swapped in to make sure that 2 things are not happening at once. We can ensure this by locking. Doing this process in the right order means that Q will not page fault back in halfway through the eviction process since it will still have the access the frame.

We have semaphores downing while we fetch_swap_slots, calculate_victim_frames, and while we block_write. We sema_up afterwards to resume activity after we know that there will be no conflicts.


>> B7: Suppose a page fault in process P causes a page to be read from
>> the file system or swap.  How do you ensure that a second process Q
>> cannot interfere by e.g. attempting to evict the frame while it is
>> still being read in?


In exception.c in our page_fault handler, in conjunction with some locking techniques using semaphores in swap.c and frame.c, we use locks around the file_read functions and some of the evict_frame method (in swap.c). We use sema_down to ensure that nothing can be accesses/modified during the file read. We do not want anything to be evicted during that process. After the read/write is done, the locks are released and the eviction of a frame will now be able to resume.


>> B8: Explain how you handle access to paged-out pages that occur
>> during system calls.  Do you use page faults to bring in pages (as
>> in user programs), or do you have a mechanism for "locking" frames
>> into physical memory, or do you use some other design?  How do you
>> gracefully handle attempted accesses to invalid virtual addresses?


In our syscall.c in the sysRead(), there is a chance that the data will be read into a page that is not even paged in yet. We have some checks to see if there is a stack_page or if the page is writable. We also set some bits back once the page has been created. It is best to catch this before trying to read a file into data that is not yet paged.

Our program looks to see if there is data for the supplemental page table entry. If not, after checking that the address of the data is within 32 bytes of the stack pointer, the program goes through and adds as many pages as needed to the stack. The program allocates the page at the start address of the data, then loops up the stack until the we reach the page that should be paged in. If there is, the program allows the page fault handler to page in the required pages.

We make a check for the start address of the data to see if the data is a valid user address before any checks are made. If the address is NOT valid, then we exit with -1. The valid addresses are stored in the hash table and are easily accessible once they are actually stored and need to be easily accessed.


>> B9: A single lock for the whole VM system would make
>> synchronization easy, but limit parallelism.  On the other hand,
>> using many locks complicates synchronization and raises the
>> possibility for deadlock but allows for high parallelism.  Explain
>> where your design falls along this continuum and why you chose to
>> design it this way.


We do not use one particular extreme over the other. We actually have locks globally for the swap and frame  but we have individual locks for the supplemental page table (for each thread).

This essentially allows us to have some parallelism while making some operations that happen during locking as small as possible, to reduce the wait that other processes may have. However, since our swap and frame tables use global locks, they have to use global synchronization techniques.

In our eviction functions, we only use the semaphores when we are selecting the frame to evict because the race will probably occurr when two different processes pick the same exact frame to evict. Many other scenarios can be handled by writing the contents to swap or evn to a file in the meantime.


		 MEMORY MAPPED FILES (Extra Credit)
		 ==================================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> C2: Describe how memory mapped files integrate into your virtual
>> memory subsystem.  Explain how the page fault and eviction
>> processes differ between swap pages and other pages.

>> C3: Explain how you determine whether a new file mapping overlaps
>> any existing segment.

---- RATIONALE ----

>> C4: Mappings created with "mmap" have similar semantics to those of
>> data demand-paged from executables, except that "mmap" mappings are
>> written back to their original files, not to swap.  This implies
>> that much of their implementation can be shared.  Explain why your
>> implementation either does or does not share much of the code for
>> the two situations.

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
