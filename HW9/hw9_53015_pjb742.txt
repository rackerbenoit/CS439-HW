Homework #: 9
Student Name: Paul Benoit
EID: pjb742
CS login: paulbeno
Email address: paul.benoit36@gmail.com
Unique Number: 53015

----
In Unix, the pipe(fd[0]) function call creates an I/O mechanism called a pipe and returns two file descriptors, fd[0] and fd[1]. The files associated with fd[0] and fd[1] are streams of data and are both opened for reading and writing. Suppose pipe always returns the two lowest-numbered file descriptors in the process's file descriptor table that are unused. Assume that initially fdt[], the file descriptor table, has three open entries: fdt[0] is the default input device, fdt[1] is the default output device and fdt[2] is the default error output device; all other entries of the fdt are NULL. What does the fdt look like after each of the five following commands is executed in sequence by the process?

1: pipe (&fd[0]);
2: close(fd[0]);
3: close(1);
4: dup(fd[1]);
5: close(fd[1]);
When might such a sequence of commands be useful?

You'll need to use the man pages for pipe, close, and dup to answer this question.
-------------------1.


pipe()  creates a pipe, a unidirectional data channel that can be used for interprocess communication.  The array pipefd is used to return two file descriptors referring to the ends of the pipe.  pipefd[0] refers to the read  end  of  the  pipe.   pipefd[1] refers  to the write end of the pipe.  Data written to the write end of the pipe is buffered by the kernel until it is read from the read end of the pipe.
-- fdt has ported all the files to the pipe buffer

 close()  closes  a  file descriptor, so that it no longer refers to any file and may be reused.  Any record locks (see fcntl(2)) held on the file it was associated with, and owned by the process, are removed (regardless of the file descriptor that was  used to obtain the lock).
-- Closes fd[0] so that no other files can refer to it or close it.

These system calls create a copy of the file descriptor oldfd.
-- Duplicates fd[1]

Closes the the fd[1] file descriptor


----
Which file allocation scheme that we studied is most similar to paging? segmentation?
-------------------2.


Multi-level index allocation and NTFS records with extents


----
Jane would like to append data to the file /usr/jane/classes/cs439/exam_study_notes.txt. Assuming she has the correct permissions, describe the steps the operating system would need to take to append the data.
-------------------3.


cs439/ is a directory that contains the inumber for exam_study_notes.txt
  - Locate cs439/, read directory
classes/ is a directory that contains the inumber for cs439
  - Locate classes/, read directory
jane/ is a directory that contains the inumber for classes
  - Locate jane/, read directory
usr/ is a directory that contains the inumber for jane
  - Locate usr/, read directory

↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓

Read the inode for / from a fixed location
Read the first data block for root
Read the inode for usr/
Read the first data block for usr/
Read the inode for jane/
Read the first data block for jane/
Read the inode for classes/
Read the first data block for classes/
Read the inode for cs439/
Read the first data block for cs439/
Read the inode for exam_study_notes.txt
Read the first data block for exam_study_notes.txt


----
Using the traceroute command, trace the hops a packet takes from one of the UTCS machines to a website in Europe. Inspect the trace. What do you notice? Do you see any machines you recognize? ISPs? Cities? Please be sure to tell us what website you used.
Perform the trace again. How does the second time affect the output?
-------------------4.


The trace starts in Austin on the UT servers abd moves out to further servers.
I also noticed that the traceroute sets 30 hops as max and only uses about 13 hops to complete the trace.
cs-gw.cs.utexas.edu (128.83.139.1) -> I recognize this
Cites:
Austin
Houston (IAH)

traceroute europa.eu/

The routing seem to be faster when the tracer is run twice


----
System Calls vs. Procedure Calls: How much more expensive is a system call than a procedure call? Write a simple test program to compare the cost of a simple procedure call to a simple system call ("getuid()" is a good candidate on UNIX; see the man page.) (Note: be careful to prevent the optimizing compiler from "optimizing out" your procedure calls. Do not compile with optimization on. Also, do not use a system call within your procedure call!)
Explain the difference (if any) between the time required by your simple procedure call and simple system call by discussing what work each call must do (be specific). [Note: Do not provide the source code for your program, just the results].
Hint: You should use system calls such as gethrtime() or gettimeofday() for time measurements. Design your code such that the measurement overhead is negligible. Also, be aware that timer values in some systems have limited resolution (e.g., millisecond resolution).
-------------------5.


A system call is expected to be significantly more expensive than a procedure call. A system call involves the following actions, which do not occur during a simple procedure call, and thus entails a high overhead:

- A context switch
- A trap to a specific location in the interrupt vector
- Control passes to a service routine, which runs in 'monitor' mode
- The monitor determines what system call has occurred
- Monitor verifies that the parameters passed are correct and legal


